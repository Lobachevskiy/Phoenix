// Generated by delombok at Sat Jul 01 03:46:04 EEST 2017
package com.ontalsoft.flc.lib;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import com.ontalsoft.flc.lib.chunks.FLCChunkByteRun;
import com.ontalsoft.flc.lib.chunks.FLCChunkColor256;
import com.ontalsoft.flc.lib.chunks.FLCChunkDeltaFLC;
import com.ontalsoft.flc.lib.chunks.FLCChunkFrameType;
import com.ontalsoft.flc.lib.chunks.FLCChunkUnknown;
import com.ontalsoft.flc.util.BinaryReader;

public abstract class FLCChunk {
	protected int size;
	private ChunkType type;
	private List<FLCChunk> subChunks;
	protected FLCFile flcFile;

	public FLCChunk(FLCFile flcFile) {
		this.flcFile = flcFile;
		subChunks = new ArrayList<FLCChunk>();
	}

	protected abstract void readChunk(BinaryReader reader) throws IOException;

	protected void readSubChunks(BinaryReader reader, int count) throws IOException {
		for (int i = 0; i < count; i++) {
			FLCChunk chunk = FLCChunk.createChunk(reader, flcFile);
			subChunks.add(chunk);
		}
	}

	public static FLCChunk createChunk(BinaryReader reader, FLCFile flcFile) throws IOException {
		int chunkSize = (int) reader.readUInt32();
		ChunkType type = ChunkType.getChunkType(reader.readUInt16());
		FLCChunk result = null;
		if (type != null) {
			switch (type) {
			case FRAME_TYPE: 
				result = new FLCChunkFrameType(flcFile);
				break;

			case COLOR_256: 
				result = new FLCChunkColor256(flcFile);
				break;

			case BYTE_RUN: 
				result = new FLCChunkByteRun(flcFile);
				break;

			case DELTA_FLC: 
				result = new FLCChunkDeltaFLC(flcFile);
				break;

			default: 
				result = new FLCChunkUnknown(flcFile);
				reader.skipBytes(chunkSize - 6);
			}
		} else 
//				System.out.println(":SKIP (Irrelevant chunk)");
		{
			result = new FLCChunkUnknown(flcFile);
			reader.skipBytes(chunkSize - 6);
//			System.out.println(":SKIP (Unknown chunk)");
		}
		if (result != null) {
			result.size = chunkSize;
			result.type = type;
			result.readChunk(reader);
		}
		return result;
	}

	public FLCChunk getChunkByType(ChunkType type) {
		int subChunksSize = subChunks.size();
		for (int i = 0; i < subChunksSize; i++) {
			if (subChunks.get(i).getType().equals(type)) {
				return subChunks.get(i);
			}
		}
		return null;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public ChunkType getType() {
		return this.type;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public List<FLCChunk> getSubChunks() {
		return this.subChunks;
	}
}
