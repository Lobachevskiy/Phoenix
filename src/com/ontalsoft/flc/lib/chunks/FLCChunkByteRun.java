// Generated by delombok at Sat Jul 01 03:46:04 EEST 2017
package com.ontalsoft.flc.lib.chunks;

import java.io.IOException;
import com.ontalsoft.flc.lib.FLCChunk;
import com.ontalsoft.flc.lib.FLCFile;
import com.ontalsoft.flc.util.BinaryReader;

public class FLCChunkByteRun extends FLCChunk {
	private int[] pixelData;

	public FLCChunkByteRun(FLCFile flcFile) {
		super(flcFile);
	}

	@Override
	protected void readChunk(BinaryReader reader) throws IOException {
		pixelData = new int[flcFile.getWidth() * flcFile.getHeight()];
		int pixelDataPointer = 0;
		for (int line = 0; line < flcFile.getHeight(); line++) {
			reader.skipBytes(1); // skip packet count byte 
			int uncompressedWidth = 0;
			while (uncompressedWidth < flcFile.getWidth()) {
				byte controlByte = reader.readSByte(); // signed byte
				if (controlByte < 0) {
					byte copyCount = (byte) -controlByte;
					uncompressedWidth += copyCount;
					for (int i = 0; i < copyCount; i++) {
						pixelData[pixelDataPointer++] = reader.readUByte();
					}
				} else {
					uncompressedWidth += controlByte;
					int dataByte = reader.readUByte();
					for (int i = 0; i < controlByte; i++) {
						pixelData[pixelDataPointer++] = dataByte;
					}
				}
			}
		}
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int[] getPixelData() {
		return this.pixelData;
	}
}
